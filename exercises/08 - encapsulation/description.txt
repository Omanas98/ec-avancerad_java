Problem 1.	Class Box
You are given a geometric figure box with parameters length, width and height. Model a class Box that that can be instantiated by the same three parameters. Expose to the outside world only methods for its surface area, lateral surface area and its volume (formulas: http://www.mathwords.com/r/rectangular_parallelepiped.htm).

On the first three lines you will get the length, width and height. On the next three lines print the surface area, lateral surface area and the volume of the box.

Examples:
Input:
2, 3, 4

Output:
Surface Area - 52.00
Lateral Surface Area - 40.00
Volume – 24.00

---

Input:
1.3
1
6

Output:
Surface Area - 30.20
Lateral Surface Area - 27.60
Volume - 7.80

==========================================================================

Problem 2.	Class Box Data Validation
A box’s side should not be zero or a negative number. Expand your class from the previous problem by adding data validation for each parameter given to the constructor. Make a private setter that performs data validation internally. 

Examples:
Input:
2, -3, 4

Output:
Width cannot be zero or negative.

==========================================================================

Problem 3.	Animal Farm
You should be familiar with encapsulation already. For this problem, you’ll be working with the Animal Farm project. It contains a class Chicken. Chicken contains several fields, a constructor, several properties and several methods. Your task is to encapsulate or hide anything that is not intended to be viewed or modified from outside the class. 

Chicken lives for 15 years. Chicken have name for sure, at least 1 symbol long. Chicken producing eggs:
•	First 6 years it produces 2 eggs per day
•	Next 6 years it produces 1 egg per day
•	And after that it produces 0.75 eggs per day

Step 1. Encapsulate Fields
Fields should be private. Leaving fields open for modification from outside the class is potentially dangerous. Make all fields in the Chicken class private.
In case the value inside a field is needed elsewhere, use getters to reveal it.

Step 2. Ensure Classes Have a Correct State
Having getters and setters is useless if you don’t actually use them. The Chicken constructor modifies the fields directly which is wrong when there are suitable setters available. Modify the constructor to fix this issue.

Step 3. Validate Data Properly
Validate the chicken’s name (it cannot be null, empty or whitespace). In case of invalid name, print exception message "Name cannot be empty." 
Validate the age properly, minimum and maximum age are provided, make use of them. In case of invalid age, print exception message "Age should be between 0 and 15." 

Step 4. Hide Internal Logic
If a method is intended to be used only by descendant classes or internally to perform some action, there is no point in keeping them public. The calculateProductPerDay() method is used by the productPerDay() public getter. This means the method can safely be hidden inside the Animal class by declaring it private.

Examples:
Input:
Mara, 10

Output:
Chicken Mara (age 10) can produce 1 eggs per day.

---

Input:
Mara, 17

Output:
Age should be between 0 and 15.

---

Input:
Gosho, 6

Output:
Chicken Gosho (age 6) can produce 1 eggs per day.


